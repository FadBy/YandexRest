/*
 * Mega Market Open API
 * Вступительное задание в Летнюю Школу Бэкенд Разработки Яндекса 2022
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.ShopUnit;
import org.openapitools.client.model.ShopUnitImportRequest;
import org.openapitools.client.model.ShopUnitStatisticResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteIdDelete
     * @param id Идентификатор (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Удаление прошло успешно. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Невалидная схема документа или входные данные не верны. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория/товар не найден. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIdDeleteCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delete/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIdDeleteValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = deleteIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Удалить элемент по идентификатору. При удалении категории удаляются все дочерние элементы. Доступ к статистике (истории обновлений) удаленного элемента невозможен.  Так как время удаления не передается, при удалении элемента время обновления родителя изменять не нужно.  **Обратите, пожалуйста, внимание на этот обработчик. При его некорректной работе тестирование может быть невозможно.** 
     * @param id Идентификатор (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Удаление прошло успешно. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Невалидная схема документа или входные данные не верны. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория/товар не найден. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteIdDelete(UUID id) throws ApiException {
        deleteIdDeleteWithHttpInfo(id);
    }

    /**
     * 
     * Удалить элемент по идентификатору. При удалении категории удаляются все дочерние элементы. Доступ к статистике (истории обновлений) удаленного элемента невозможен.  Так как время удаления не передается, при удалении элемента время обновления родителя изменять не нужно.  **Обратите, пожалуйста, внимание на этот обработчик. При его некорректной работе тестирование может быть невозможно.** 
     * @param id Идентификатор (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Удаление прошло успешно. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Невалидная схема документа или входные данные не верны. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория/товар не найден. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteIdDeleteWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Удалить элемент по идентификатору. При удалении категории удаляются все дочерние элементы. Доступ к статистике (истории обновлений) удаленного элемента невозможен.  Так как время удаления не передается, при удалении элемента время обновления родителя изменять не нужно.  **Обратите, пожалуйста, внимание на этот обработчик. При его некорректной работе тестирование может быть невозможно.** 
     * @param id Идентификатор (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Удаление прошло успешно. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Невалидная схема документа или входные данные не верны. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория/товар не найден. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIdDeleteAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for importsPost
     * @param shopUnitImportRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Вставка или обновление прошли успешно. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Невалидная схема документа или входные данные не верны. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importsPostCall(ShopUnitImportRequest shopUnitImportRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shopUnitImportRequest;

        // create path and map variables
        String localVarPath = "/imports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importsPostValidateBeforeCall(ShopUnitImportRequest shopUnitImportRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = importsPostCall(shopUnitImportRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Импортирует новые товары и/или категории. Товары/категории импортированные повторно обновляют текущие. Изменение типа элемента с товара на категорию или с категории на товар не допускается. Порядок элементов в запросе является произвольным.    - uuid товара или категории является уникальным среди товаров и категорий   - родителем товара или категории может быть только категория   - принадлежность к категории определяется полем parentId   - товар или категория могут не иметь родителя (при обновлении parentId на null, элемент остается без родителя)   - название элемента не может быть null   - у категорий поле price должно содержать null   - цена товара не может быть null и должна быть больше либо равна нулю.   - при обновлении товара/категории обновленными считаются **все** их параметры   - при обновлении параметров элемента обязательно обновляется поле **date** в соответствии с временем обновления   - в одном запросе не может быть двух элементов с одинаковым id   - дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400.  Гарантируется, что во входных данных нет циклических зависимостей и поле updateDate монотонно возрастает. Гарантируется, что при проверке передаваемое время кратно секундам. 
     * @param shopUnitImportRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Вставка или обновление прошли успешно. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Невалидная схема документа или входные данные не верны. </td><td>  -  </td></tr>
     </table>
     */
    public void importsPost(ShopUnitImportRequest shopUnitImportRequest) throws ApiException {
        importsPostWithHttpInfo(shopUnitImportRequest);
    }

    /**
     * 
     * Импортирует новые товары и/или категории. Товары/категории импортированные повторно обновляют текущие. Изменение типа элемента с товара на категорию или с категории на товар не допускается. Порядок элементов в запросе является произвольным.    - uuid товара или категории является уникальным среди товаров и категорий   - родителем товара или категории может быть только категория   - принадлежность к категории определяется полем parentId   - товар или категория могут не иметь родителя (при обновлении parentId на null, элемент остается без родителя)   - название элемента не может быть null   - у категорий поле price должно содержать null   - цена товара не может быть null и должна быть больше либо равна нулю.   - при обновлении товара/категории обновленными считаются **все** их параметры   - при обновлении параметров элемента обязательно обновляется поле **date** в соответствии с временем обновления   - в одном запросе не может быть двух элементов с одинаковым id   - дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400.  Гарантируется, что во входных данных нет циклических зависимостей и поле updateDate монотонно возрастает. Гарантируется, что при проверке передаваемое время кратно секундам. 
     * @param shopUnitImportRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Вставка или обновление прошли успешно. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Невалидная схема документа или входные данные не верны. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importsPostWithHttpInfo(ShopUnitImportRequest shopUnitImportRequest) throws ApiException {
        okhttp3.Call localVarCall = importsPostValidateBeforeCall(shopUnitImportRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Импортирует новые товары и/или категории. Товары/категории импортированные повторно обновляют текущие. Изменение типа элемента с товара на категорию или с категории на товар не допускается. Порядок элементов в запросе является произвольным.    - uuid товара или категории является уникальным среди товаров и категорий   - родителем товара или категории может быть только категория   - принадлежность к категории определяется полем parentId   - товар или категория могут не иметь родителя (при обновлении parentId на null, элемент остается без родителя)   - название элемента не может быть null   - у категорий поле price должно содержать null   - цена товара не может быть null и должна быть больше либо равна нулю.   - при обновлении товара/категории обновленными считаются **все** их параметры   - при обновлении параметров элемента обязательно обновляется поле **date** в соответствии с временем обновления   - в одном запросе не может быть двух элементов с одинаковым id   - дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400.  Гарантируется, что во входных данных нет циклических зависимостей и поле updateDate монотонно возрастает. Гарантируется, что при проверке передаваемое время кратно секундам. 
     * @param shopUnitImportRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Вставка или обновление прошли успешно. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Невалидная схема документа или входные данные не верны. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importsPostAsync(ShopUnitImportRequest shopUnitImportRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importsPostValidateBeforeCall(shopUnitImportRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for nodeIdStatisticGet
     * @param id UUID товара/категории для которой будет отображаться статистика (required)
     * @param dateStart Дата и время начала интервала, для которого считается статистика. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400. (optional)
     * @param dateEnd Дата и время конца интервала, для которого считается статистика. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Статистика по элементу. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Некорректный формат запроса или некорректные даты интервала. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория/товар не найден. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodeIdStatisticGetCall(UUID id, OffsetDateTime dateStart, OffsetDateTime dateEnd, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/{id}/statistic"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateEnd", dateEnd));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nodeIdStatisticGetValidateBeforeCall(UUID id, OffsetDateTime dateStart, OffsetDateTime dateEnd, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling nodeIdStatisticGet(Async)");
        }
        

        okhttp3.Call localVarCall = nodeIdStatisticGetCall(id, dateStart, dateEnd, _callback);
        return localVarCall;

    }

    /**
     * 
     * Получение статистики (истории обновлений) по товару/категории за заданный полуинтервал [from, to). Статистика по удаленным элементам недоступна.  - цена категории - это средняя цена всех её товаров, включая товары дочерних категорий.Если категория не содержит товаров цена равна null. При обновлении цены товара, средняя цена категории, которая содержит этот товар, тоже обновляется. - можно получить статистику за всё время. 
     * @param id UUID товара/категории для которой будет отображаться статистика (required)
     * @param dateStart Дата и время начала интервала, для которого считается статистика. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400. (optional)
     * @param dateEnd Дата и время конца интервала, для которого считается статистика. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400. (optional)
     * @return ShopUnitStatisticResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Статистика по элементу. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Некорректный формат запроса или некорректные даты интервала. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория/товар не найден. </td><td>  -  </td></tr>
     </table>
     */
    public ShopUnitStatisticResponse nodeIdStatisticGet(UUID id, OffsetDateTime dateStart, OffsetDateTime dateEnd) throws ApiException {
        ApiResponse<ShopUnitStatisticResponse> localVarResp = nodeIdStatisticGetWithHttpInfo(id, dateStart, dateEnd);
        return localVarResp.getData();
    }

    /**
     * 
     * Получение статистики (истории обновлений) по товару/категории за заданный полуинтервал [from, to). Статистика по удаленным элементам недоступна.  - цена категории - это средняя цена всех её товаров, включая товары дочерних категорий.Если категория не содержит товаров цена равна null. При обновлении цены товара, средняя цена категории, которая содержит этот товар, тоже обновляется. - можно получить статистику за всё время. 
     * @param id UUID товара/категории для которой будет отображаться статистика (required)
     * @param dateStart Дата и время начала интервала, для которого считается статистика. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400. (optional)
     * @param dateEnd Дата и время конца интервала, для которого считается статистика. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400. (optional)
     * @return ApiResponse&lt;ShopUnitStatisticResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Статистика по элементу. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Некорректный формат запроса или некорректные даты интервала. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория/товар не найден. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopUnitStatisticResponse> nodeIdStatisticGetWithHttpInfo(UUID id, OffsetDateTime dateStart, OffsetDateTime dateEnd) throws ApiException {
        okhttp3.Call localVarCall = nodeIdStatisticGetValidateBeforeCall(id, dateStart, dateEnd, null);
        Type localVarReturnType = new TypeToken<ShopUnitStatisticResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Получение статистики (истории обновлений) по товару/категории за заданный полуинтервал [from, to). Статистика по удаленным элементам недоступна.  - цена категории - это средняя цена всех её товаров, включая товары дочерних категорий.Если категория не содержит товаров цена равна null. При обновлении цены товара, средняя цена категории, которая содержит этот товар, тоже обновляется. - можно получить статистику за всё время. 
     * @param id UUID товара/категории для которой будет отображаться статистика (required)
     * @param dateStart Дата и время начала интервала, для которого считается статистика. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400. (optional)
     * @param dateEnd Дата и время конца интервала, для которого считается статистика. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Статистика по элементу. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Некорректный формат запроса или некорректные даты интервала. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория/товар не найден. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodeIdStatisticGetAsync(UUID id, OffsetDateTime dateStart, OffsetDateTime dateEnd, final ApiCallback<ShopUnitStatisticResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = nodeIdStatisticGetValidateBeforeCall(id, dateStart, dateEnd, _callback);
        Type localVarReturnType = new TypeToken<ShopUnitStatisticResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nodesIdGet
     * @param id Идентификатор элемента (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация об элементе. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Невалидная схема документа или входные данные не верны. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория/товар не найден. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodesIdGetCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nodesIdGetValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling nodesIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = nodesIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Получить информацию об элементе по идентификатору. При получении информации о категории также предоставляется информация о её дочерних элементах.  - для пустой категории поле children равно пустому массиву, а для товара равно null - цена категории - это средняя цена всех её товаров, включая товары дочерних категорий. Если категория не содержит товаров цена равна null. При обновлении цены товара, средняя цена категории, которая содержит этот товар, тоже обновляется. 
     * @param id Идентификатор элемента (required)
     * @return ShopUnit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация об элементе. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Невалидная схема документа или входные данные не верны. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория/товар не найден. </td><td>  -  </td></tr>
     </table>
     */
    public ShopUnit nodesIdGet(UUID id) throws ApiException {
        ApiResponse<ShopUnit> localVarResp = nodesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Получить информацию об элементе по идентификатору. При получении информации о категории также предоставляется информация о её дочерних элементах.  - для пустой категории поле children равно пустому массиву, а для товара равно null - цена категории - это средняя цена всех её товаров, включая товары дочерних категорий. Если категория не содержит товаров цена равна null. При обновлении цены товара, средняя цена категории, которая содержит этот товар, тоже обновляется. 
     * @param id Идентификатор элемента (required)
     * @return ApiResponse&lt;ShopUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация об элементе. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Невалидная схема документа или входные данные не верны. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория/товар не найден. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopUnit> nodesIdGetWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = nodesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ShopUnit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Получить информацию об элементе по идентификатору. При получении информации о категории также предоставляется информация о её дочерних элементах.  - для пустой категории поле children равно пустому массиву, а для товара равно null - цена категории - это средняя цена всех её товаров, включая товары дочерних категорий. Если категория не содержит товаров цена равна null. При обновлении цены товара, средняя цена категории, которая содержит этот товар, тоже обновляется. 
     * @param id Идентификатор элемента (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация об элементе. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Невалидная схема документа или входные данные не верны. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория/товар не найден. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodesIdGetAsync(UUID id, final ApiCallback<ShopUnit> _callback) throws ApiException {

        okhttp3.Call localVarCall = nodesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ShopUnit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesGet
     * @param date Дата и время запроса. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список товаров, цена которых была обновлена. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Невалидная схема документа или входные данные не верны. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesGetCall(OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sales";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesGetValidateBeforeCall(OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling salesGet(Async)");
        }
        

        okhttp3.Call localVarCall = salesGetCall(date, _callback);
        return localVarCall;

    }

    /**
     * 
     * Получение списка **товаров**, цена которых была обновлена за последние 24 часа включительно [now() - 24h, now()] от времени переданном в запросе. Обновление цены не означает её изменение. Обновления цен удаленных товаров недоступны. При обновлении цены товара, средняя цена категории, которая содержит этот товар, тоже обновляется. 
     * @param date Дата и время запроса. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400 (required)
     * @return ShopUnitStatisticResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список товаров, цена которых была обновлена. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Невалидная схема документа или входные данные не верны. </td><td>  -  </td></tr>
     </table>
     */
    public ShopUnitStatisticResponse salesGet(OffsetDateTime date) throws ApiException {
        ApiResponse<ShopUnitStatisticResponse> localVarResp = salesGetWithHttpInfo(date);
        return localVarResp.getData();
    }

    /**
     * 
     * Получение списка **товаров**, цена которых была обновлена за последние 24 часа включительно [now() - 24h, now()] от времени переданном в запросе. Обновление цены не означает её изменение. Обновления цен удаленных товаров недоступны. При обновлении цены товара, средняя цена категории, которая содержит этот товар, тоже обновляется. 
     * @param date Дата и время запроса. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400 (required)
     * @return ApiResponse&lt;ShopUnitStatisticResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список товаров, цена которых была обновлена. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Невалидная схема документа или входные данные не верны. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopUnitStatisticResponse> salesGetWithHttpInfo(OffsetDateTime date) throws ApiException {
        okhttp3.Call localVarCall = salesGetValidateBeforeCall(date, null);
        Type localVarReturnType = new TypeToken<ShopUnitStatisticResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Получение списка **товаров**, цена которых была обновлена за последние 24 часа включительно [now() - 24h, now()] от времени переданном в запросе. Обновление цены не означает её изменение. Обновления цен удаленных товаров недоступны. При обновлении цены товара, средняя цена категории, которая содержит этот товар, тоже обновляется. 
     * @param date Дата и время запроса. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список товаров, цена которых была обновлена. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Невалидная схема документа или входные данные не верны. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesGetAsync(OffsetDateTime date, final ApiCallback<ShopUnitStatisticResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesGetValidateBeforeCall(date, _callback);
        Type localVarReturnType = new TypeToken<ShopUnitStatisticResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
